/*
 * $Id: ViewFrame.java 84 2008-04-07 17:29:50Z matt.zipay $
 */

package net.ninthtest.stopwatch;

import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import net.ninthtest.stopwatch.model.DAOFactory;
import net.ninthtest.stopwatch.model.DataAccessException;
import net.ninthtest.stopwatch.model.Interruption;
import net.ninthtest.stopwatch.model.InterruptionDAO;
import net.ninthtest.stopwatch.model.Task;
import net.ninthtest.stopwatch.model.TaskDAO;

/**
 * This class defines the UI frame displayed when a user chooses to view the
 * contents of the <i>StopWatch</i> database.
 *
 * @author Matthew Zipay (ninthtest@gmail.com)
 * @version $Revision: 84 $
 */
public class ViewFrame extends javax.swing.JFrame {
    private static final String CLASSNAME = ViewFrame.class.getName();
    
    private static final Logger LOGGER = Logger.getLogger(ViewFrame.class.getPackage().getName());
    
    /** Creates new form ViewFrame */
    public ViewFrame() {
        final String methodName = "<init>";
        LOGGER.entering(CLASSNAME, methodName);
        
        initComponents();
        setLocation(Math.max(0, Toolkit.getDefaultToolkit().getScreenSize().width - getSize().width), 0);

        LOGGER.exiting(CLASSNAME, methodName);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        tasksPanel = new javax.swing.JPanel();
        tasksScrollPane = new javax.swing.JScrollPane();
        tasksTable = new javax.swing.JTable();
        interruptionsPanel = new javax.swing.JPanel();
        interruptionsScrollPane = new javax.swing.JScrollPane();
        interruptionsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("View database");
        setAlwaysOnTop(true);
        setResizable(false);
        tasksPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tasks"));
        tasksTable.setModel(new TasksTableModel());
        tasksTable.setFillsViewportHeight(true);
        tasksScrollPane.setViewportView(tasksTable);

        javax.swing.GroupLayout tasksPanelLayout = new javax.swing.GroupLayout(tasksPanel);
        tasksPanel.setLayout(tasksPanelLayout);
        tasksPanelLayout.setHorizontalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tasksScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                .addContainerGap())
        );
        tasksPanelLayout.setVerticalGroup(
            tasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPanelLayout.createSequentialGroup()
                .addComponent(tasksScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        interruptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Interruptions"));
        interruptionsTable.setModel(new InterruptionsTableModel());
        interruptionsTable.setFillsViewportHeight(true);
        interruptionsScrollPane.setViewportView(interruptionsTable);

        javax.swing.GroupLayout interruptionsPanelLayout = new javax.swing.GroupLayout(interruptionsPanel);
        interruptionsPanel.setLayout(interruptionsPanelLayout);
        interruptionsPanelLayout.setHorizontalGroup(
            interruptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interruptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(interruptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                .addContainerGap())
        );
        interruptionsPanelLayout.setVerticalGroup(
            interruptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(interruptionsPanelLayout.createSequentialGroup()
                .addComponent(interruptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interruptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {interruptionsPanel, tasksPanel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tasksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(interruptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {interruptionsPanel, tasksPanel});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel interruptionsPanel;
    private javax.swing.JScrollPane interruptionsScrollPane;
    private javax.swing.JTable interruptionsTable;
    private javax.swing.JPanel tasksPanel;
    private javax.swing.JScrollPane tasksScrollPane;
    private javax.swing.JTable tasksTable;
    // End of variables declaration//GEN-END:variables
    
}

class TasksTableModel extends AbstractTableModel {
    private static final String CLASSNAME = TasksTableModel.class.getName();
    
    private static final Logger LOGGER = Logger.getLogger(TasksTableModel.class.getPackage().getName());

    private static final String[] COLUMN_NAMES = {"id", "description", "start_time", "end_time"};

    private int rowCount;
    
    private Object[][] cellData;

    TasksTableModel() {        
        final String methodName = "<init>";
        LOGGER.entering(CLASSNAME, methodName);

        List allTasks = null;
        try {
            TaskDAO taskDAO = (TaskDAO) DAOFactory.getImplementation(TaskDAO.class);
            allTasks = taskDAO.findAllTasks();
        } catch (DataAccessException ex) {
            LOGGER.logp(Level.SEVERE, CLASSNAME, methodName, "error retrieving tasks", ex);
            allTasks = new ArrayList();
        }

        rowCount = allTasks.size();

        cellData = new Object[rowCount][];

        for (int i =0; i < allTasks.size(); ++i) {
            Task task = (Task) allTasks.get(i);
            
            cellData[i] = new Object[] {task.getId(), task.getDescription(), task.getStartTime(), task.getEndTime()};
        }

        LOGGER.exiting(CLASSNAME, methodName);
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return cellData[rowIndex][columnIndex];
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getRowCount
     */
    public int getRowCount() {
        return rowCount;
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getColumnCount
     */
    public int getColumnCount() {
        return COLUMN_NAMES.length;
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getColumnName(int)
     */
    public String getColumnName(int column) {
        return COLUMN_NAMES[column];
    }
}

class InterruptionsTableModel extends AbstractTableModel {
    private static final String CLASSNAME = InterruptionsTableModel.class.getName();
    
    private static final Logger LOGGER = Logger.getLogger(InterruptionsTableModel.class.getPackage().getName());

    private static final String[] COLUMN_NAMES = {"id", "related_task_id", "description", "start_time", "end_time"};

    private int rowCount;
    
    private Object[][] cellData;

    InterruptionsTableModel() {        
        final String methodName = "<init>";
        LOGGER.entering(CLASSNAME, methodName);

        List allInterruptions = null;
        try {
            InterruptionDAO intrDAO = (InterruptionDAO) DAOFactory.getImplementation(InterruptionDAO.class);
            allInterruptions = intrDAO.findAllInterruptions();
        } catch (DataAccessException ex) {
            LOGGER.logp(Level.SEVERE, CLASSNAME, methodName, "error retrieving tasks", ex);
            allInterruptions = new ArrayList();
        }

        rowCount = allInterruptions.size();

        cellData = new Object[rowCount][];

        for (int i =0; i < allInterruptions.size(); ++i) {
            Interruption intr = (Interruption) allInterruptions.get(i);
            
            cellData[i] = new Object[] {intr.getId(), intr.getRelatedTaskId(), intr.getDescription(), intr.getStartTime(), intr.getEndTime()};
        }

        LOGGER.exiting(CLASSNAME, methodName);
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return cellData[rowIndex][columnIndex];
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getRowCount
     */
    public int getRowCount() {
        return rowCount;
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getColumnCount
     */
    public int getColumnCount() {
        return COLUMN_NAMES.length;
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.swing.table.AbstractTableModel#getColumnName(int)
     */
    public String getColumnName(int column) {
        return COLUMN_NAMES[column];
    }
}
